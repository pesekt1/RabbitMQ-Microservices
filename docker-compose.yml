version: "3.8"
services:
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5673:5672 #rabbitmq
      - 15673:15672 #rabbitmq management plugin (guest/guest) http://localhost:15673
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_PROMETHEUS_PATH: "/metrics"
    labels:
      - "prometheus.job=rabbitmq"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - microservices
  prometheus:
    image: "prom/prometheus:v2.30.3"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
  mongodb:
    image: "mongo:7.0.0"
    container_name: "mongo"
    ports:
      - "27018:27017"
    networks:
      - microservices
    environment:
      MONGO_INITDB_DATABASE: yt_node_main
  mysql-seeder:
    build:
      context: ./seeders/mysql-seeder
      dockerfile: Dockerfile.seeder.prod
    depends_on:
      - mysql
    environment:
      MYSQL_DATABASE_URL: mysql://yt_node:123456@mysql:3306/yt_node_admin #communicating with mysql container - not localhost
    networks:
      - microservices
  mongo-seeder:
    build:
      context: ./seeders/mongo-seeder
      dockerfile: Dockerfile.seeder.prod
    depends_on:
      - mongodb
    environment:
      MONGO_URL: mongodb://mongodb:27017/yt_node_main
    networks:
      - microservices
  main:
    build: 
      context: ./main
      dockerfile: Dockerfile.prod
    ports:
      - "8001:8001"
    environment:
      RABBIT_MQ_URL: "amqp://guest:guest@rabbitmq:5672/" #communicating with rabbitmq container - not localhost
      MONGO_URL: mongodb://mongodb:27017/yt_node_main #communicating with mongodb container - not localhost
      PORT: 8001
      ADMIN_PORT: 8002
      MAIN_FRONTEND_PORT: 3001
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - microservices
  main-frontend:
    build: 
      context: ./main-frontend
      dockerfile: Dockerfile.prod
    ports:
      - 3001:3001
    environment:
      REACT_APP_API_URL: http://localhost:8001/api
      PORT: 3001
    networks:
      - microservices
  admin:
    build: 
      context: ./admin
      dockerfile: Dockerfile.prod
    ports:
      - 8002:8002
    depends_on:
      - rabbitmq
      - mysql
    environment:
      MYSQL_DATABASE_URL: mysql://yt_node:123456@mysql:3306/yt_node_admin #communicating with mysql container - not localhost
      RABBIT_MQ_URL: "amqp://guest:guest@rabbitmq:5672/" #communicating with rabbitmq container - not localhost
      PORT: 8002
      ADMIN_FRONTEND_PORT: 3002
    networks:
      - microservices
  admin-frontend:
    build: 
      context: ./admin-frontend
      dockerfile: Dockerfile.prod
    ports:
      - 3002:3002
    environment:
      REACT_APP_API_URL: http://localhost:8002/api
      PORT: 3002
    networks:
      - microservices
  mysql:
    image: mysql:latest
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: yt_node_admin
      MYSQL_USER: yt_node
      MYSQL_PASSWORD: 123456
    ports:
      - "3307:3306"
    networks:
      - microservices
networks:
  microservices:
    driver: bridge